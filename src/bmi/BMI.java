/*
 * Body Mass Index
 * @version 1.0 
 */
package bmi;

import com.sun.glass.events.KeyEvent;
import java.awt.Toolkit;

/**
 *
 * @author Ali Adnan Aslam 
 */
public class BMI extends javax.swing.JFrame {

    /**
     * Creates new form BMI
     * @function BMI
     * @version 1.0
     */
    public BMI() {
        initComponents();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTop = new javax.swing.JPanel();
        jLabelBMICalculator = new javax.swing.JLabel();
        jPanelBottom = new javax.swing.JPanel();
        jLabelAge = new javax.swing.JLabel();
        jComboBoxGender = new javax.swing.JComboBox<>();
        jLabelHeight = new javax.swing.JLabel();
        jTextHeightFT = new javax.swing.JTextField();
        jComboBoxHeightMeter = new javax.swing.JComboBox<>();
        jTextHeightIN = new javax.swing.JTextField();
        jLabelWeight = new javax.swing.JLabel();
        jTextWeightST = new javax.swing.JTextField();
        jTextWeightLB = new javax.swing.JTextField();
        jComboBoxWeightMeter = new javax.swing.JComboBox<>();
        jLabelBMI = new javax.swing.JLabel();
        jLabelIdealWeight = new javax.swing.JLabel();
        jLabelFat = new javax.swing.JLabel();
        jTextAge = new javax.swing.JTextField();
        jButtonCalculate = new javax.swing.JButton();
        jLabelBMIOutput = new java.awt.Label();
        jLabelIdealWeightOutput = new java.awt.Label();
        jLabelFatOutput = new java.awt.Label();
        jLabelBMIClassification = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanelTop.setBackground(new java.awt.Color(0, 153, 0));

        jLabelBMICalculator.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelBMICalculator.setForeground(new java.awt.Color(255, 255, 255));
        jLabelBMICalculator.setText("BMI Calculator");

        jPanelBottom.setBackground(new java.awt.Color(255, 255, 255));

        jLabelAge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelAge.setForeground(new java.awt.Color(51, 153, 0));
        jLabelAge.setText("AGE");

        jComboBoxGender.setForeground(new java.awt.Color(51, 153, 0));
        jComboBoxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        jLabelHeight.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelHeight.setForeground(new java.awt.Color(51, 153, 0));
        jLabelHeight.setText("HEIGHT");

        jTextHeightFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextHeightFTKeyTyped(evt);
            }
        });

        jComboBoxHeightMeter.setForeground(new java.awt.Color(51, 153, 0));
        jComboBoxHeightMeter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FT + IN", "CM" }));
        jComboBoxHeightMeter.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBoxHeightMeterPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jTextHeightIN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextHeightINKeyTyped(evt);
            }
        });

        jLabelWeight.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelWeight.setForeground(new java.awt.Color(51, 153, 0));
        jLabelWeight.setText("WEIGHT");

        jTextWeightST.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextWeightSTKeyTyped(evt);
            }
        });

        jTextWeightLB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextWeightLBKeyTyped(evt);
            }
        });

        jComboBoxWeightMeter.setForeground(new java.awt.Color(51, 153, 0));
        jComboBoxWeightMeter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ST + LB", "KG", "LB" }));
        jComboBoxWeightMeter.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBoxWeightMeterPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jComboBoxWeightMeter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxWeightMeterActionPerformed(evt);
            }
        });

        jLabelBMI.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelBMI.setForeground(new java.awt.Color(51, 153, 0));
        jLabelBMI.setText("BMI");

        jLabelIdealWeight.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelIdealWeight.setForeground(new java.awt.Color(51, 153, 0));
        jLabelIdealWeight.setText("IDEAL WEIGHT");

        jLabelFat.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelFat.setForeground(new java.awt.Color(51, 153, 0));
        jLabelFat.setText("FAT");

        jTextAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextAgeKeyTyped(evt);
            }
        });

        jButtonCalculate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonCalculate.setForeground(new java.awt.Color(51, 153, 0));
        jButtonCalculate.setText("Calculate");
        jButtonCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculateActionPerformed(evt);
            }
        });

        jLabelBMIOutput.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabelBMIOutput.setForeground(new java.awt.Color(51, 153, 0));

        jLabelIdealWeightOutput.setForeground(new java.awt.Color(51, 153, 0));

        jLabelFatOutput.setForeground(new java.awt.Color(51, 153, 0));

        jLabelBMIClassification.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelBMIClassification.setForeground(new java.awt.Color(0, 153, 102));

        javax.swing.GroupLayout jPanelBottomLayout = new javax.swing.GroupLayout(jPanelBottom);
        jPanelBottom.setLayout(jPanelBottomLayout);
        jPanelBottomLayout.setHorizontalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomLayout.createSequentialGroup()
                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBottomLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabelAge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelBottomLayout.createSequentialGroup()
                        .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBottomLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelBMI))
                            .addGroup(jPanelBottomLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelWeight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelHeight))))
                        .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelBottomLayout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jTextWeightLB, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelBottomLayout.createSequentialGroup()
                                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextAge, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jTextHeightFT)
                                        .addComponent(jTextWeightST, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextHeightIN, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9)
                        .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxHeightMeter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxWeightMeter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelBottomLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabelBMIOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelBottomLayout.createSequentialGroup()
                                .addComponent(jLabelIdealWeight)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE))
                            .addGroup(jPanelBottomLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelIdealWeightOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)))
                        .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelBottomLayout.createSequentialGroup()
                                .addComponent(jLabelFat)
                                .addGap(29, 29, 29))
                            .addComponent(jLabelFatOutput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBottomLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(jPanelBottomLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabelBMIClassification, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(22, 22, 22))
        );
        jPanelBottomLayout.setVerticalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBottomLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAge)
                    .addComponent(jComboBoxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHeight)
                    .addComponent(jTextHeightFT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxHeightMeter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextHeightIN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextWeightST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxWeightMeter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextWeightLB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelWeight))
                .addGap(45, 45, 45)
                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBMI)
                    .addComponent(jLabelFat)
                    .addComponent(jLabelIdealWeight))
                .addGap(30, 30, 30)
                .addGroup(jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelBMIOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFatOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIdealWeightOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabelBMIClassification, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jButtonCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        javax.swing.GroupLayout jPanelTopLayout = new javax.swing.GroupLayout(jPanelTop);
        jPanelTop.setLayout(jPanelTopLayout);
        jPanelTopLayout.setHorizontalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabelBMICalculator)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelTopLayout.setVerticalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabelBMICalculator)
                .addGap(18, 18, 18)
                .addComponent(jPanelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * jTextAgeKeyTyped Method provides that the input entered in the 
     * text field should be only digit
     * @param evt this is the key typed event
     */
    private void jTextAgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAgeKeyTyped
        char input = evt.getKeyChar();
        if ((!(Character.isDigit(input))) || (input == KeyEvent.VK_BACKSPACE)
                || (input == KeyEvent.VK_DELETE)) {
            getToolkit().beep();                    //if statement starts here
            evt.consume();
        }
    }//GEN-LAST:event_jTextAgeKeyTyped

    /**
     * jLabelHeightFTKeyTyped Method provides that the input entered in the 
     * text field should be only digit
     * @param evt this is the key typed event
     */
    private void jTextHeightFTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextHeightFTKeyTyped
        char input = evt.getKeyChar();
        if ((!(Character.isDigit(input))) || (input == KeyEvent.VK_BACKSPACE)
                || (input == KeyEvent.VK_DELETE)) {
            getToolkit().beep();                    //if statement starts here
            if (evt.getKeyChar() == '.') {} else {
                evt.consume();
            }
        }        
    }//GEN-LAST:event_jTextHeightFTKeyTyped

    /**
     * jLabelHeightINKeyTyped Method provides that the input entered in the 
     * text field should be only digit
     * @param evt this is the key typed event
     */
    private void jTextHeightINKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextHeightINKeyTyped
        char input = evt.getKeyChar();
        if ((!(Character.isDigit(input))) || (input == KeyEvent.VK_BACKSPACE)
                || (input == KeyEvent.VK_DELETE)) {
            getToolkit().beep();                    //if statement starts here
            if (evt.getKeyChar() == '.') {} else {
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTextHeightINKeyTyped

    private void jComboBoxWeightMeterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxWeightMeterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxWeightMeterActionPerformed

    /**
     * jLabelHeightSTKeyTyped Method provides that the input entered in the 
     * text field should be only digit
     * @param evt this is the key typed event
     */
    private void jTextWeightSTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextWeightSTKeyTyped
        char input = evt.getKeyChar();
        if ((!(Character.isDigit(input))) || (input == KeyEvent.VK_BACKSPACE)
                || (input == KeyEvent.VK_DELETE)) {
            getToolkit().beep();                    //if statement starts here
            if (evt.getKeyChar() == '.') {} else {
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTextWeightSTKeyTyped

    /**
     * jLabelHeightLBKeyTyped Method provides that the input entered in the 
     * text field should be only digit
     * @param evt this is the key typed event
     */
    private void jTextWeightLBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextWeightLBKeyTyped
        char input = evt.getKeyChar();
        if ((!(Character.isDigit(input))) || (input == KeyEvent.VK_BACKSPACE)
                || (input == KeyEvent.VK_DELETE)) {
            getToolkit().beep();                    //if statement starts here
            if (evt.getKeyChar() == '.') {} else {
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTextWeightLBKeyTyped

    /**
     * jComboBoxHeightMeterPopupMenuWillBecomeInvisible method provides the visibility of 
     * text field when you select "FT + IN" comboBox  
     * @param evt this is the selection event occurs when a field is selected in comboBox
     */
    private void jComboBoxHeightMeterPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBoxHeightMeterPopupMenuWillBecomeInvisible
        // Code starts here
        String selectedItem = (String)jComboBoxHeightMeter.getSelectedItem();
        if (selectedItem == "CM") {
            jTextHeightFT.setText("");
            jTextHeightIN.setVisible(false);
        } else {
            jTextHeightFT.setText("");
            jTextHeightIN.setText("");
            jTextHeightIN.setVisible(true);
        }
    }//GEN-LAST:event_jComboBoxHeightMeterPopupMenuWillBecomeInvisible

    /**
     * jComboBoxWeightMeterPopupMenuWillBecomeInvisible method provides the visibility of 
     * text field when you select "ST + LB" field in the comboBox  
     * @param evt this is the selection event occurs when a field is selected in comboBox
     */    
    private void jComboBoxWeightMeterPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBoxWeightMeterPopupMenuWillBecomeInvisible
        // Code starts here
        String selectedItem = (String)jComboBoxWeightMeter.getSelectedItem();
        if (selectedItem == "ST + LB") {
            jTextWeightST.setText("");
            jTextWeightLB.setVisible(true);
        } else {
            jTextWeightST.setText("");
            jTextWeightLB.setText("");
            jTextWeightLB.setVisible(false);
        }        
    }//GEN-LAST:event_jComboBoxWeightMeterPopupMenuWillBecomeInvisible

    private void jButtonCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculateActionPerformed
        // TODO add your handling code here:
        calculateBMI();
        calculateIdealWeight();
        calculateFat();
    }//GEN-LAST:event_jButtonCalculateActionPerformed
    
    /**
     * setIcon method provides the functionality of setting the BMI icon
     */
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
    }

    /**
     * calculateBMI method provides the Body Mass Index (BMI) from the height and weight
     * @return double returning BMI because it is required to calculate the body FAT
     */
    public double calculateBMI() {
        // getting validated height & weight
        double heightInInch = validateHeight();
        double weightInPound = validateWeight();
        
        /* Calculating the BMI */
        int BMI_MULTIPLIER = 703;
        double BMI = 0.0;
        if (heightInInch > 0) {
            BMI = (weightInPound / (heightInInch * heightInInch) * BMI_MULTIPLIER);
        }
        if (BMI <= 100.0) {
            jLabelBMIOutput.setText(Double.toString(Math.round(BMI * 10.0) / 10.0));
        } else {
            jLabelBMIOutput.setText("?");
        }
        
        // Showing the status according to the BMI classification
        if ((BMI > 0) && (BMI < 16)) {
            jLabelBMIClassification.setText("Very Severely Underweight");
        } else if ((BMI >= 16) && (BMI < 17)) {
            jLabelBMIClassification.setText("Severely Underweight");
        } else if ((BMI >= 17) && (BMI < 18.5)) {
            jLabelBMIClassification.setText("Underweight");
        } else if ((BMI >= 18.5) && (BMI < 25)) {
            jLabelBMIClassification.setText("Normal");
        } else if ((BMI >= 25) && (BMI < 30)) {
            jLabelBMIClassification.setText("Overweight");
        } else if ((BMI >= 30) && (BMI < 35)) {
            jLabelBMIClassification.setText("Obese Class I");
        } else if ((BMI >= 35) && (BMI < 40)) {
            jLabelBMIClassification.setText("Obese Class II");
        } else if ((BMI >= 40) && (BMI <= 100)) {
            jLabelBMIClassification.setText("Obese Class III");
        }
        return (Math.round(BMI * 100.0) / 100.0);
    }
    
    /**
     * validateHeight method validates and returns the height
     * @return double returning the height 
     */
    public double validateHeight() {
        // Adjusting all the possible conditions related to the height
        String feet = jTextHeightFT.getText();
        String inch = jTextHeightIN.getText();
        double totalInch = 0.0;
        if (feet.isEmpty()) {
            feet = "0";         //if textField is empty it is set to 0
        }
        if (inch.isEmpty()) {
            inch = "0";         //if textField is empty it is set to 0
        }
        if ((String)jComboBoxHeightMeter.getSelectedItem() == "FT + IN") {
            int FEET_MULTIPLIER = 12;
            totalInch = (Double.parseDouble(feet) * FEET_MULTIPLIER) 
                    + Double.parseDouble(inch);
            // Resetting the textFields if inches are greater than 11
            if (Double.parseDouble(inch) > 11.0) {
                int txtFeet = (int)totalInch / FEET_MULTIPLIER;
                int txtInch = (int)totalInch - txtFeet * FEET_MULTIPLIER;
                jTextHeightFT.setText(Integer.toString(txtFeet));
                jTextHeightIN.setText(Integer.toString(txtInch));
            }
        } else if ((String)jComboBoxHeightMeter.getSelectedItem() == "CM") {
            double CM_MULTIPLIER = 0.394;
            totalInch = Double.parseDouble(feet) * CM_MULTIPLIER;       //first textField is used 'feet'
        }
        return totalInch;
    }
    
    /**
     * validateWeight method validates and returns the weight
     * @return double returning the weight 
     */
    public double validateWeight() {
        // All the possible conditions related to the weight
        String stone = jTextWeightST.getText();
        String pound = jTextWeightLB.getText();
        double totalPound = 0.0;
        if (stone.isEmpty()) {
            stone = "0";         //if textField is empty it is set to 0
        }
        if (pound.isEmpty()) {
            pound = "0";         //if textField is empty it is set to 0
        }
        if ((String)jComboBoxWeightMeter.getSelectedItem() == "ST + LB") {
            int STONE_MULTIPLIER = 14;
            totalPound = (Double.parseDouble(stone) * STONE_MULTIPLIER) 
                    + Double.parseDouble(pound);

            // Resetting the textFields if pounds are greater than 13
            if (Double.parseDouble(pound) > 13.0) {
                int txtStone = (int)totalPound / STONE_MULTIPLIER;
                int txtPound = (int)totalPound - txtStone * STONE_MULTIPLIER;
                jTextWeightST.setText(Integer.toString(txtStone));
                jTextWeightLB.setText(Integer.toString(txtPound));
            }
        } else if ((String)jComboBoxWeightMeter.getSelectedItem() == "KG") {
            double KG_MULTIPLIER = 2.205;
            totalPound = (Double.parseDouble(stone) * KG_MULTIPLIER);   //first textField is used 'stone'
        } else if ((String)jComboBoxWeightMeter.getSelectedItem() == "LB") {
            totalPound = Double.parseDouble(stone);                     //first textField is used 'stone'
        }
        return totalPound;
    }
    
    /**
     * calculateIdealWeight method provides the ideal weight calculated from 
     * the male/female comboBox and height
     */
    public void calculateIdealWeight() {
        // setting the constant values
        double MEN_WEIGHT_MULTIPLIER = 3.1;
        double WOMEN_WEIGHT_MULTIPLIER = 3.0;
        int MIN_HEIGHT_LIMIT = 21;
        double MEN_MIN_IDEAL_WEIGHT = 2.7;
        double WOMEN_MIN_IDEAL_WEIGHT = 0.1;
        double WEIGHT_MULTIPLIER_CM = 1.2;
        double heightInInches = validateHeight();
        double idealWeight = 0.0;
        if ((heightInInches > 20) && ((String)jComboBoxGender.getSelectedItem() == "Male")) {
            idealWeight = MEN_WEIGHT_MULTIPLIER * (heightInInches - MIN_HEIGHT_LIMIT) 
                    + MEN_MIN_IDEAL_WEIGHT;
            if ((Double.parseDouble(jTextHeightFT.getText()) >= 52) 
                    && (String)jComboBoxHeightMeter.getSelectedItem() == "CM") {
                double MEN_MIN_WEIGHT_CM = 1.0;
                idealWeight = WEIGHT_MULTIPLIER_CM * (Double.parseDouble(jTextHeightFT.getText()) - 52.0)
                        + MEN_MIN_WEIGHT_CM;
            }
        } else if ((heightInInches > 20) && ((String)jComboBoxGender.getSelectedItem() == "Female")) {
            idealWeight = WOMEN_WEIGHT_MULTIPLIER * (heightInInches - MIN_HEIGHT_LIMIT) 
                    + WOMEN_MIN_IDEAL_WEIGHT;    
            if ((Double.parseDouble(jTextHeightFT.getText()) >= 54) 
                    && (String)jComboBoxHeightMeter.getSelectedItem() == "CM") {
                double WOMEN_MIN_WEIGHT_CM = 0.9;
                idealWeight = WEIGHT_MULTIPLIER_CM * (Double.parseDouble(jTextHeightFT.getText()) - 54.0)
                        + WOMEN_MIN_WEIGHT_CM;
            }            
        } 
        if ((idealWeight <= 440) && ((String)jComboBoxWeightMeter.getSelectedItem() == "LB"
                || (String)jComboBoxWeightMeter.getSelectedItem() == "ST + LB")) {
            jLabelIdealWeightOutput.setText(Double.toString(Math.round(idealWeight * 10.0) / 10.0) 
                    + " lbs");
        } else if ((idealWeight <= 440) && ((String)jComboBoxWeightMeter.getSelectedItem() == "KG")) {
            jLabelIdealWeightOutput.setText(Double.toString(Math.round((idealWeight * 0.454) * 10.0) 
                    / 10.0) + " kg");            
        } else {
            jLabelIdealWeightOutput.setText("?");
        }
    }
    
    /**
     * 
     */
    public void calculateFat() {
        double MULTIPLIER_BMI = 1.20;
        double AGE_MULTIPLIER = 0.23;
        double FAT_SUBTRACTOR = 5.4;
        double totalFat = 0.0;
        String fat = jTextAge.getText();
        if (fat.isEmpty()) {
            fat = "0";                  //if jTextAge is empty it is set to 0
        }
        if ((String)jComboBoxGender.getSelectedItem() == "Male") {
            double MEN_FAT_SUBTRACTOR = 10.8;
            totalFat = (MULTIPLIER_BMI * calculateBMI()) 
                    + (AGE_MULTIPLIER * Integer.parseInt(fat))
                    - MEN_FAT_SUBTRACTOR - FAT_SUBTRACTOR;
        } else if ((String)jComboBoxGender.getSelectedItem() == "Female") {
            totalFat = (MULTIPLIER_BMI * calculateBMI()) 
                    + (AGE_MULTIPLIER * Integer.parseInt(fat)) - FAT_SUBTRACTOR;            
        }
        // setting the output of the Fat
        if (totalFat >= 0 && totalFat <= 100) {
            jLabelFatOutput.setText((Math.round(totalFat * 10.0) / 10.0) + " %");
        } else {
            jLabelFatOutput.setText("?");
        }
            
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BMI().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCalculate;
    private javax.swing.JComboBox<String> jComboBoxGender;
    private javax.swing.JComboBox<String> jComboBoxHeightMeter;
    private javax.swing.JComboBox<String> jComboBoxWeightMeter;
    private javax.swing.JLabel jLabelAge;
    private javax.swing.JLabel jLabelBMI;
    private javax.swing.JLabel jLabelBMICalculator;
    private javax.swing.JLabel jLabelBMIClassification;
    private java.awt.Label jLabelBMIOutput;
    private javax.swing.JLabel jLabelFat;
    private java.awt.Label jLabelFatOutput;
    private javax.swing.JLabel jLabelHeight;
    private javax.swing.JLabel jLabelIdealWeight;
    private java.awt.Label jLabelIdealWeightOutput;
    private javax.swing.JLabel jLabelWeight;
    private javax.swing.JPanel jPanelBottom;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JTextField jTextAge;
    private javax.swing.JTextField jTextHeightFT;
    private javax.swing.JTextField jTextHeightIN;
    private javax.swing.JTextField jTextWeightLB;
    private javax.swing.JTextField jTextWeightST;
    // End of variables declaration//GEN-END:variables


}
